학번: 2024004, 이름: 이창의

문제 1: 알고리즘의 시간복잡도와 공간복잡도에 대해 설명하고, Big-O 표기법의 의미와 예시를 들어 설명하시오.

답:
시간복잡도와 공간복잡도는 알고리즘의 효율성을 평가하는 두 축입니다.

시간복잡도는 알고리즘이 문제를 해결하는 데 필요한 시간을 입력 크기의 함수로 나타낸 것입니다. 공간복잡도는 알고리즘이 실행되는 동안 필요한 메모리 공간을 의미합니다.

Big-O 표기법은 수학적 점근 표기법으로, 알고리즘의 상한(upper bound)을 나타냅니다. 즉, 최악의 경우 성능을 보장하는 표기법입니다.

실생활 비유를 들면:
- O(1): 사전에서 특정 페이지를 바로 펼치기 (직접 접근)
- O(log n): 사전에서 단어 찾기 (이진 탐색)
- O(n): 책을 처음부터 끝까지 읽기 (선형 탐색)
- O(n²): 반 학생들이 서로 악수하기 (모든 쌍의 비교)

흥미로운 점은 실제 개발에서는 Big-O뿐만 아니라 상수 인수도 중요하다는 것입니다. 예를 들어, 작은 데이터셋에서는 O(n²) 알고리즘이 O(n log n) 알고리즘보다 빠를 수 있습니다.

문제 2: 자료구조 중 스택(Stack)과 큐(Queue)의 차이점을 설명하고, 각각의 실제 사용 예시를 들어보시오.

답:
스택과 큐는 데이터의 삽입과 삭제 순서가 정반대인 자료구조입니다.

스택(LIFO): 접시 쌓기와 같은 구조
- 마지막에 넣은 것이 먼저 나옴
- 한쪽 끝(top)에서만 삽입/삭제

큐(FIFO): 놀이공원 줄서기와 같은 구조  
- 먼저 넣은 것이 먼저 나옴
- 양쪽 끝에서 삽입과 삭제

창의적 사용 예시:
스택:
- 실행 취소(Ctrl+Z) 기능: 가장 최근 작업부터 취소
- 미로 탐색에서 DFS 구현
- 웹 브라우저 방문 기록
- 계산기의 수식 계산 (후위 표기법)

큐:
- 스트리밍 서비스의 버퍼링
- 게임에서 매칭 대기열
- 운영체제의 작업 스케줄링
- 네트워크 패킷 처리

문제 3: 객체지향 프로그래밍의 4대 특징을 설명하고, 각각에 대한 간단한 예시를 제시하시오.

답:
객체지향 프로그래밍의 4대 특징을 현실 세계의 "자동차" 예시로 설명해보겠습니다.

1. 캡슐화(Encapsulation): 정보 은닉과 데이터 보호
- 자동차의 엔진 내부 구조는 운전자에게 숨겨져 있음
- 운전자는 액셀, 브레이크, 핸들이라는 인터페이스만 사용
- 코드에서는 private 변수와 public 메서드로 구현

2. 상속(Inheritance): 코드 재사용과 계층 구조
- Vehicle(교통수단) → Car(자동차) → SportsCar(스포츠카)
- 하위 클래스는 상위 클래스의 속성과 메서드를 물려받음
- "is-a" 관계 표현

3. 다형성(Polymorphism): 같은 인터페이스, 다른 구현
- Vehicle의 start() 메서드가 Car에서는 엔진 시동, Bicycle에서는 페달 밟기
- 메서드 오버라이딩과 오버로딩으로 구현
- 런타임에 실제 객체 타입에 따라 적절한 메서드 호출

4. 추상화(Abstraction): 복잡성 숨기기와 핵심 기능 노출
- 운전자는 "가속", "정지", "방향 전환"이라는 추상적 개념만 알면 됨
- 복잡한 엔진 제어, ABS 시스템 등은 추상화로 숨겨짐

문제 4: 데이터베이스의 정규화가 필요한 이유와 1차, 2차, 3차 정규화에 대해 간략히 설명하시오.

답:
데이터베이스 정규화는 "데이터의 정리 정돈"과 같습니다.

정규화가 필요한 이유:
1. 데이터 중복으로 인한 저장 공간 낭비 방지
2. 데이터 불일치 문제 해결 (한 곳에서 수정했는데 다른 곳은 안 된 경우)
3. 삽입/갱신/삭제 이상 현상 방지

실생활 비유로 설명하면:

1차 정규화 (1NF): "한 칸에 하나씩만"
- 학생 정보 테이블에서 "취미" 칸에 "독서, 영화, 게임"을 한번에 적지 말고
- 각 취미마다 별도의 행으로 분리
- 원자값(atomic value) 원칙

2차 정규화 (2NF): "완전히 의존하는 것만 함께"
- 수강신청 테이블(학번, 과목코드, 학생이름, 교수명)에서
- 학생이름은 학번에만 의존하므로 학생 테이블로 분리
- 부분 함수 종속성 제거

3차 정규화 (3NF): "간접 의존성 제거"
- 학번 → 학과코드 → 학과명의 연쇄 의존성을
- 학과 정보를 별도 테이블로 분리하여 해결
- 이행 함수 종속성 제거

추가 인사이트: 실무에서는 때로 성능을 위해 의도적으로 비정규화(denormalization)를 하기도 합니다. 정규화는 데이터 무결성과 성능 사이의 트레이드오프를 고려해야 하는 설계 결정입니다.
